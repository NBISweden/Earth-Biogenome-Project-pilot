stage {
    inspect    = '01_read_inspection'
    preprocess = '02_read_preprocessing'
    assembly   = '03_assembly'
    screen     = '04_contamination_screen'
    purge      = '05_duplicate_purging'
    polish     = '06_error_polishing'
    scaffold   = '07_scaffolding'
    curate     = '08_rapid_curation'
    alignRNA   = '09_RNA_alignment'
}

process {

    // PREPARE INPUT
    withName: 'GOAT_TAXONSEARCH' {
        tag        = { meta.sample.name }
        ext.args   = "--lineage --variables odb10_lineage,chromosome_number,genome_size,ploidy"
    }
    withName: 'PREPARE_INPUT:SAMTOOLS_FASTA' {
        tag        = { "$meta.id:$bam.baseName" }
        ext.prefix = { bam.baseName }
    }

    // BUILD DATABASES
    withName: 'FASTK_FASTK' {
        scratch    = false  // Disable scratch to get around bug https://github.com/nextflow-io/nextflow/issues/2983
        ext.args   = { "-t1 -k${params.fastk?.kmer_size?:31}" }
    }
    withName: 'FASTK_MERGE' {
        scratch    = false  // Disable scratch to get around bug https://github.com/nextflow-io/nextflow/issues/2983
        ext.prefix = { "${meta.id}_merged" }
    }
    withName: 'BUILD_HIFI_DATABASES:FASTK_FASTK' {
        ext.prefix = { "${meta.id}_${reads instanceof List ? reads[0].baseName : reads.baseName}_hifi" }
    }
    withName: 'BUILD_HIC_DATABASES:FASTK_FASTK' {
        ext.prefix = { "${meta.id}_${reads instanceof List ? reads[0].baseName : reads.baseName}_hic" }
    }

    // GENOME PROPERTIES
    withName: 'FASTK_HISTEX' {
        ext.args   = "-G"
        ext.prefix = { "${meta.id}_histex" }
    }
    withName: 'GENESCOPEFK' {
        ext.args   = {
            [
                "--kmer_length ${params.genescopefk?.kmer_size?:31}",
                "--ploidy ${meta.sample.ploidy?:2}"
            ].join(' ')
        }
        publishDir = [
            path: { "$params.outdir/$stage.inspect/genescopefk" },
            mode: params.publish_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }
    withName: 'MERQURYFK_PLOIDYPLOT' {
        publishDir = [
            path: { "$params.outdir/$stage.inspect/ploidyplot" },
            mode: params.publish_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }
    withName: 'MERQURYFK_KATGC' {
        publishDir = [
            path: { "$params.outdir/$stage.inspect/katgc" },
            mode: params.publish_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    // COMPARE_LIBRARIES
    withName: 'MERQURYFK_KATCOMP' {
        publishDir = [
            path: { "$params.outdir/$stage.inspect/kat_comp" },
            mode: params.publish_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    // SCREEN READS
    withName: 'MASH_SCREEN' {
        ext.args   = '-w'
        ext.prefix = { "${meta.id}_${query.baseName}" }
        publishDir = [
            path: { "$params.outdir/$stage.inspect/mash_screen/screens" },
            mode: params.publish_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }
    withName: 'MASH_FILTER' {
        ext.args   = "-F '[\\t/]' '\$1 > 0.9 && \$2 > 100'"
        publishDir = [
            path: { "$params.outdir/$stage.inspect/mash_screen" },
            mode: params.publish_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    // ASSEMBLE_HIFI
    withName: 'HIFIASM' {
        tag        = { meta.assembly.build }
        ext.args   = { params.hifiasm ? params.hifiasm[task.index-1] : "" }
        publishDir = [
            path: { "$params.outdir/$stage.assembly/$meta.assembly.build" },
            mode: params.publish_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }
    withName: 'GFASTATS' {
        ext.prefix = { assembly.baseName }
        publishDir = [
            path: { "$params.outdir/$stage.assembly/$meta.assembly.build" },
            mode: params.publish_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }
    withName: 'GFATOOLS_GFA2FA' {
        ext.prefix = { gfa.baseName }
        publishDir = [
            path: { "$params.outdir/$stage.assembly/$meta.assembly.build" },
            mode: params.publish_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    // MITOHIFI
    withName: 'MITOHIFI_FINDMITOREFERENCE' {
        publishDir = [
            path: { "$params.outdir/$stage.assembly/mitochondria/reference" },
            mode: params.publish_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }
    withName: 'MITOHIFI_MITOHIFI' {
        tag        = { meta.assembly.build }
        ext.prefix = { "${meta.id}-${meta.assembly.build}" }
        publishDir = [
            path: { "$params.outdir/$stage.assembly/mitochondria/$meta.assembly.build" },
            mode: params.publish_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    // PURGE_DUPLICATES
    withName: 'MINIMAP2_ALIGN_READS' {
        tag        = { meta.assembly.build }
        ext.args   = "-x map-hifi"
    }
    withName: 'MINIMAP2_ALIGN_ASSEMBLY_.*' {
        tag        = { meta.assembly.build }
        ext.args   = "-x asm5 -DP"
    }
    withName: 'PURGEDUPS_PURGEDUPS' {
        ext.args   = "-2"
    }
    withName: 'PURGEDUPS_CALCUTS' {
        // kmer coverage is very close to read coverage w.r.t long read sequencing.
        // kmer coverage is used as a proxy for read coverage here.
        // kmer coverage is extracted from the GenomeScope model when available.
        ext.args   = { meta.kmercov ? "-m ${meta.kmercov * 1.5} -u ${meta.kmercov * 3}" : "" }
    }
    withName: '(PURGEDUPS|MINIMAP2)_.*_PRIMARY' {
        ext.prefix = { "${meta.id}_${meta.assembly.build}_primary" }
    }
    withName: '(PURGEDUPS|MINIMAP2)_.*_ALTERNATE' {
        ext.prefix = { "${meta.id}_${meta.assembly.build}_alternate" }
    }
    withName: 'PURGEDUPS_.*' {
        tag        = { meta.assembly.build }
        publishDir = [
            path: { "$params.outdir/$stage.purge/purge_dups" },
            mode: params.publish_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]      
    }

    // COMPARE_ASSEMBLIES
    withName: 'QUAST' {
        cpus       = { Math.min(6, consensus instanceof List ? consensus.size() : 1 ) }
        publishDir = [
            path: { "$params.outdir/$stage.purge/quast" },
            mode: params.publish_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    // EVALUATE_ASSEMBLY
    withName: 'MERQURYFK_MERQURYFK' {
        tag        = { meta.assembly.build }
        ext.prefix = { meta.assembly.build }
        publishDir = [
            path: { "$params.outdir/$stage.purge/merquryfk/$meta.assembly.build" },
            mode: params.publish_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: 'BUSCO' {
        tag        = { "${meta.assembly.build}-${lineage}" }
        ext.prefix = { "${meta.assembly.build}-${lineage}" }
        ext.args   = '--tar'
        publishDir = [
            path: { "$params.outdir/$stage.purge/busco/$meta.assembly.build" },
            mode: params.publish_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
        time       = 4.d
    }

    withName: 'STAR_ALIGN' {
        tag        = { meta.assembly.build }
        ext.args   = '--readFilesCommand zcat'
        publishDir = [
            path: { "$params.outdir/$stage.alignRNA/star/$meta.assembly.build" },
            mode: params.publish_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

}
