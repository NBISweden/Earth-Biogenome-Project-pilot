stage {
    inspect    = '01_read_inspection'
    preprocess = '02_read_preprocessing'
    assembly   = '03_assembly'
    screen     = '04_contamination_screen'
    purge      = '05_duplicate_purging'
    polish     = '06_error_polishing'
    scaffold   = '07_scaffolding'
    curate     = '08_rapid_curation'
    alignRNA   = '09_RNA_alignment'
    report     = '10_report'
}

process {

    // PREPARE INPUT
    // withName: 'UNTAR_TAXONOMY' {
    //     storeDir   = { params.cache }
    // }
    withName: 'ENA_TAXQUERY' {
        executor = 'local'
    }
    withName: 'GOAT_TAXONSEARCH' {
        ext.args   = "--lineage --variables odb10_lineage,haploid_number,genome_size,ploidy"
        publishDir = [
            path: { "$params.outdir/$stage.inspect/goat" },
            mode: params.publish_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }
    withName: 'PREPARE_INPUT:SAMTOOLS_FASTA' {
        tag        = { "$meta.id:$bam.baseName" }
        ext.prefix = { bam.baseName }
    }
    withName: 'MERGE_PACBIO' {
        ext.prefix = { "${meta.id}_mergedpb.fasta.gz" }
    }

    withName: 'CONVERT_FASTQ_CRAM:FASTP' {
        ext.prefix = { reads.head().baseName.commonPrefix(reads.last().baseName) }
        ext.args   = { [
            "--disable_adapter_trimming",
            "--disable_quality_filtering",
            "--disable_trim_poly_g",
            "--disable_length_filtering",
            "--trim_front1=5",
            "--trim_front2=5",
        ].minus("").join(' ') }
        publishDir = [
            path: { "$params.outdir/$stage.preprocess/hi-c_trimmed_fastq" },
            mode: params.publish_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: 'CONVERT_FASTQ_CRAM:SAMTOOLS_IMPORT' {
        ext.args   = '--output-fmt cram'
        publishDir = [
            path: { "$params.outdir/$stage.preprocess/hi-c_cram" },
            mode: params.publish_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }
    withName: 'CONVERT_FASTQ_CRAM:SAMTOOLS_INDEX' {
        publishDir = [
            path: { "$params.outdir/$stage.preprocess/hi-c_cram" },
            mode: params.publish_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    // BUILD FASTK DATABASES
    withName: 'BUILD_FASTK_HIFI_DATABASE:FASTK_FASTK' {
        scratch    = false  // !Disable scratch to get around bug https://github.com/nextflow-io/nextflow/issues/2983
        ext.args   = { "-t1 -k${params.fastk?.kmer_size?:31} -P\$PWD -v" }
        ext.prefix = { "${meta.id}_${reads instanceof List ? reads[0].baseName : reads.baseName}_hifi" }
    }
    withName: 'BUILD_FASTK_HIC_DATABASE:FASTK_FASTK' {
        scratch    = false  // !Disable scratch to get around bug https://github.com/nextflow-io/nextflow/issues/2983
        ext.args   = { "-t1 -k${params.fastk?.kmer_size?:31} -P\$PWD -v" }
        ext.prefix = { "${meta.id}_${reads instanceof List ? reads[0].baseName : reads.baseName}_hic" }
    }
    withName: 'BUILD_FASTK_HIFI_DATABASE:FASTK_MERGE' {
        scratch    = false  // !Disable scratch to get around bug https://github.com/nextflow-io/nextflow/issues/2983
        ext.prefix = { "${meta.id}_merged_hifi" }
    }
    withName: 'BUILD_FASTK_HIC_DATABASE:FASTK_MERGE' {
        scratch    = false  // !Disable scratch to get around bug https://github.com/nextflow-io/nextflow/issues/2983
        ext.prefix = { "${meta.id}_merged_hic" }
    }
    withName: 'BUILD_MERYL_HIFI_DATABASE:MERYL_UNIONSUM' {
        ext.prefix = { "${meta.id}_hifi" }
    }
    withName: 'BUILD_MERYL_HIC_DATABASE:MERYL_UNIONSUM' {
        ext.prefix = { "${meta.id}_hic" }
    }

    // GENOME PROPERTIES
    withName: 'FASTK_HISTEX' {
        ext.args   = "-G"
        ext.prefix = { "${meta.id}_histex" }
    }
    withName: 'GENESCOPEFK' {
        ext.args   = {
            [
                "--kmer_length ${params.genescopefk?.kmer_size?:31}",
                "--ploidy ${meta.sample.ploidy?:1}"
            ].minus("").join(' ')
        }
        publishDir = [
            path: { "$params.outdir/$stage.inspect/genescopefk" },
            mode: params.publish_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }
    withName: 'MERQURYFK_PLOIDYPLOT' {
        ext.prefix = { "${meta.id}_ploidyplot" }
        publishDir = [
            path: { "$params.outdir/$stage.inspect/ploidyplot" },
            mode: params.publish_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }
    withName: 'MERQURYFK_KATGC' {
        ext.prefix = { "${meta.id}_katgc" }
        publishDir = [
            path: { "$params.outdir/$stage.inspect/katgc" },
            mode: params.publish_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    // COMPARE_LIBRARIES
    withName: 'MERQURYFK_KATCOMP' {
        ext.prefix = { "${meta.id}_katcomp" }
        publishDir = [
            path: { "$params.outdir/$stage.inspect/kat_comp" },
            mode: params.publish_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    // SCREEN READS
    withName: 'MASH_SCREEN' {
        ext.args   = '-w'
        ext.prefix = { "${meta.id}_${query.baseName}" }
        publishDir = [
            path: { "$params.outdir/$stage.inspect/mash_screen/screens" },
            mode: params.publish_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }
    withName: 'MASH_FILTER' {
        ext.args   = "-F '[\\t/]' '\$1 > 0.9 && \$2 > 100'"
        publishDir = [
            path: { "$params.outdir/$stage.inspect/mash_screen" },
            mode: params.publish_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    // ASSEMBLE_HIFI
    withName: 'HIFIASM' {
        tag        = { meta.assembly.build }
        ext.args   = { meta.settings.hifiasm.args }
        ext.prefix = { "$meta.assembly.build" }
        publishDir = [
            path: { "$params.outdir/$stage.assembly/$meta.assembly.build" },
            mode: params.publish_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }
    withName: 'GFASTATS' {
        tag        = { meta.assembly.build }
        ext.prefix = { assembly.baseName }
        ext.args   = "--nstar-report --tabular"
        publishDir = [
            path: { "$params.outdir/$stage.assembly/$meta.assembly.build" },
            mode: params.publish_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }
    withName: 'GFATOOLS_GFA2FA' {
        tag        = { meta.assembly.build }
        ext.prefix = { gfa.baseName }
        publishDir = [
            path: { "$params.outdir/$stage.assembly/$meta.assembly.build" },
            mode: params.publish_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    // MITOHIFI
    withName: 'MITOHIFI_FINDMITOREFERENCE' {
        errorStrategy = 'ignore' // TODO Build strategy with deal with failure (issues: #171, #220)
        publishDir = [
            path: { "$params.outdir/$stage.assembly/mitochondria/reference" },
            mode: params.publish_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }
    withName: 'MITOHIFI_MITOHIFI' {
        errorStrategy = 'ignore' // TODO Build strategy with deal with failure (issues: #86, #145)
        tag        = { meta.assembly.build }
        ext.prefix = { "${meta.id}-${meta.assembly.build}" }
        publishDir = [
            path: { "$params.outdir/$stage.assembly/mitochondria/$meta.assembly.build" },
            mode: params.publish_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    // COMPARE_ASSEMBLIES
    withName: 'QUAST' {
        ext.prefix = { "${meta.id}_quast_report" }
        publishDir = [
            path: { "$params.outdir/$stage.assembly/quast" },
            mode: params.publish_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    // EVALUATE_RAW_ASSEMBLY
    withName: 'EVALUATE_RAW_ASSEMBLY:MERQURYFK_MERQURYFK' {
        tag        = { meta.assembly.build }
        ext.prefix = { "${meta.assembly.build}_merquryfk" }
        publishDir = [
            path: { "$params.outdir/$stage.assembly/merquryfk/$meta.assembly.build" },
            mode: params.publish_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }
    withName: 'EVALUATE_RAW_ASSEMBLY:MERQURY' {
        tag        = { meta.assembly.build }
        ext.prefix = { "${meta.assembly.build}_merqury" }
        publishDir = [
            path: { "$params.outdir/$stage.assembly/merqury/$meta.assembly.build" },
            mode: params.publish_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }
    withName: 'EVALUATE_RAW_ASSEMBLY:BUSCO' {
        tag        = { "${meta.assembly.build}-${lineage}" }
        ext.prefix = { "${meta.assembly.build}-${lineage}" }
        ext.args   = '--tar'
        publishDir = [
            path: { "$params.outdir/$stage.assembly/busco/$meta.assembly.build" },
            mode: params.publish_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    // FCS
    withName: 'FCSGX_FETCHDB' {
        storeDir = { params.cache }
    }
    withName: 'FCSGX_RUNGX' {
        tag        = { "${meta.assembly.build}-hap${meta.haplotype}" }
        ext.prefix = { "${meta.assembly.build}-hap${meta.haplotype}" }
        publishDir = [
            path: { "$params.outdir/$stage.screen/fcsgx" },
            mode: params.publish_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }
    withName: 'FCSGX_CLEAN' {
        tag        = { "${meta.assembly.build}-hap${meta.haplotype}" }
        ext.prefix = { "${meta.assembly.build}-hap${meta.haplotype}" }
        publishDir = [
            path: { "$params.outdir/$stage.screen/fcsgx" },
            mode: params.publish_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    // PURGE_DUPLICATES
    withName: 'MINIMAP2_ALIGN_READS' {
        tag        = { meta.assembly.build }
        ext.args   = "-x map-hifi"
        ext.prefix = { "${meta.id}_" + (reads.getName().endsWith(".gz") ? reads.getBaseName(2) : reads.getBaseName()) }
    }
    withName: 'MINIMAP2_ALIGN_ASSEMBLY_.*' {
        tag        = { meta.assembly.build }
        ext.args   = "-x asm5 -DP"
    }
    withName: 'PURGEDUPS_PURGEDUPS' {
        ext.args   = "-2"
    }
    withName: 'PURGEDUPS_CALCUTS' {
        // kmer coverage is very close to read coverage w.r.t long read sequencing.
        // kmer coverage is used as a proxy for read coverage here.
        // kmer coverage is extracted from the GenomeScope model when available.
        ext.args = ''
        // ext.args   = { meta.kmercov ? "-m ${meta.kmercov * 1.5} -u ${meta.kmercov * 3}" : "" }
    }
    withName: 'PURGEDUPS_HISTPLOT' {
        ext.prefix = { "${meta.id}_${meta.assembly.build}_purgedups_hist" }
    }
    withName: '(PURGEDUPS|MINIMAP2)_.*_PRIMARY' {
        ext.prefix = { "${meta.id}_${meta.assembly.build}_hap0" }
    }
    withName: '(PURGEDUPS|MINIMAP2)_.*_ALTERNATE' {
        ext.prefix = { "${meta.id}_${meta.assembly.build}_hap1" }
    }
    withName: 'PURGE_DUPLICATES:SEQKIT_SEQ' {
        ext.prefix = { "${fastx.baseName}_fold" }
        ext.args = "-w 100"
    }
    withName: 'PURGEDUPS_.*' {
        tag        = { meta.assembly.build }
        publishDir = [
            path: { "$params.outdir/$stage.purge/purge_dups" },
            mode: params.publish_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    // EVALUATE_PURGED_ASSEMBLY
    withName: 'EVALUATE_PURGED_ASSEMBLY:MERQURYFK_MERQURYFK' {
        tag        = { meta.assembly.build }
        ext.prefix = { "${meta.assembly.build}_merquryfk" }
        publishDir = [
            path: { "$params.outdir/$stage.purge/merquryfk/$meta.assembly.build" },
            mode: params.publish_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }
    withName: 'EVALUATE_PURGED_ASSEMBLY:MERQURY' {
        tag        = { meta.assembly.build }
        ext.prefix = { "${meta.assembly.build}_merqury" }
        publishDir = [
            path: { "$params.outdir/$stage.purge/merqury/$meta.assembly.build" },
            mode: params.publish_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }
    withName: 'EVALUATE_PURGED_ASSEMBLY:BUSCO' {
        tag        = { "${meta.assembly.build}-${lineage}" }
        ext.prefix = { "${meta.assembly.build}-${lineage}" }
        ext.args   = '--tar'
        publishDir = [
            path: { "$params.outdir/$stage.purge/busco/$meta.assembly.build" },
            mode: params.publish_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: 'STAR_ALIGN' {
        tag        = { meta.assembly.build }
        ext.args   = '--readFilesCommand zcat'
        publishDir = [
            path: { "$params.outdir/$stage.alignRNA/star/$meta.assembly.build" },
            mode: params.publish_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    // scaffolding
    withName: 'BWAMEM2_MEM_SCAFFOLD' {
        ext.prefix = { "${meta.id}_${meta.assembly.build}_${reads.head().getBaseName(reads.head().name.endsWith(".gz") ? 2 : 1)}" }
        ext.args   = '-SP -T0'
        ext.args2  = { sort_bam ? "--write-index" : "" }
    }

    withName: 'PAIRTOOLS_PARSE' {
        ext.prefix = { "${bam.getBaseName()}" }
        ext.args   = { "--min-mapq 20 --walks-policy 5unique --max-inter-align-gap 30" }
        publishDir = [
            path: { "$params.outdir/$stage.scaffold/pairtools_parse/$meta.assembly.build" },
            mode: params.publish_mode,
            pattern: "*.pairsam.stat"
        ]
    }

    withName: 'PAIRTOOLS_SORT' {
        ext.prefix = { "${input.getBaseName(2)}" }
        ext.args   = { '--tmpdir=\$PWD' }
    }

    withName: 'PAIRTOOLS_MERGE' {
        ext.prefix = { "${meta.id}_${meta.assembly.build}_merge" }
    }

    withName: 'PAIRTOOLS_DEDUP' {
        ext.prefix = { "${meta.id}_${meta.assembly.build}_dedup" }
        ext.args   = '--mark-dups'
        publishDir = [
            path: { "$params.outdir/$stage.scaffold/pairtools_dedup/$meta.assembly.build" },
            mode: params.publish_mode,
            pattern: "*.pairs.stat"
        ]
    }

    withName: 'PAIRTOOLS_SPLIT' {
        ext.prefix = { "${meta.id}_${meta.assembly.build}" }
        ext.args2  = { sort_bam ? params.hic_bam_sorting == "by_coordinate" ? "--write-index" : "-n" : "" }
    }

    withName: 'YAHS' {
        ext.prefix = { "${meta.id}_${meta.assembly.build}" }
        ext.args   = { params.hic_type == "arima_v2" ? "-e GATC,GANTC,CTNAG,TTAA" : params.hic_type == "arima_v1" ? "-e GATC,GANTC" : "" }
        publishDir = [
            path: { "$params.outdir/$stage.scaffold/yahs/$meta.assembly.build" },
            mode: params.publish_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }
    // scaffolding curation
    withName: 'BWAMEM2_MEM_CURATION' {
        ext.prefix = { "${meta.id}_${meta.assembly.build}_${reads.head().getBaseName(reads.head().name.endsWith(".gz") ? 2 : 1)}" }
        ext.args   = '-SP -T0'
        ext.args2  = { sort_bam ? "--write-index" : "" }
    }

    withName: 'FILTER_FIVE_END' {
        ext.prefix = { "${bam.head().getBaseName(1)}_filt5prime" }
    }

    withName: 'TWOREADCOMBINER_FIXMATE_SORT' {
        ext.prefix = { "${bam.head().getBaseName(1)}" }
        ext.args   = { "${params.hic_map_qv}" }  // min hic map quality
        ext.args2  = '--write-index -l1'
    }

    withName: 'SCAFFOLD_CURATION:SAMTOOLS_MERGE_(HIFI|HIC)' {
        ext.prefix = { "${meta.assembly.build}_merged" }
        ext.args   = '--write-index'
    }

    withName: 'SCAFFOLD_CURATION:BIOBAMBAM_BAMMARKDUPLICATES2' {
        ext.prefix = { "${bam.getBaseName(1)}_dupMarked" }
    }

    withName: 'SCAFFOLD_CURATION:BAM2BED_SORT' {
        ext.prefix = { "${bam.head().getBaseName(1)}" }
        ext.args   = '-u -F0x400 -h'        // arguments for samtools view
        ext.args2  = '-S50G -T \$PWD'       // arguments for sort
        ext.args3  = { "${params.hic_map_qv}" }  // min hic map quality
    }
    withName: 'SCAFFOLD_CURATION:COOLER_CLOAD' {
        ext.prefix = { "${pairs.head().getBaseName(1)}" }
        ext.args   = 'pairs -0 -c1 2 -p1 3 -c2 4 -p2 5'
    }
    withName: 'SCAFFOLD_CURATION:COOLER_ZOOMIFY' {
        ext.prefix = { "${cool.head().getBaseName(1)}" }
        ext.args   = '--resolutions 1000,5000,10000,20000,40000,60000,80000,100000,120000,150000,200000,300000,400000,500000'
        publishDir = [
            path: { "$params.outdir/$stage.curate/higlass/$meta.assembly.build" },
            mode: params.publish_mode,
            pattern: "*.mcool"
        ]
    }
    withName: 'SCAFFOLD_CURATION:PRETEXTMAP' {
        ext.prefix = { "${input.head().getBaseName(1)}" }
        ext.args   = { "--sortby ${params.hic_map_sort_by} --mapq ${params.hic_map_qv}" }
    }
    withName: 'SCAFFOLD_CURATION:MINIMAP2_INDEX' {
        ext.prefix = { "${meta.assembly.build}" }
        ext.args   = "-x map-hifi"
    }
    withName: 'SCAFFOLD_CURATION:MINIMAP2_ALIGN' {
        ext.prefix = { "${meta.assembly.build}_${reads.getBaseName(reads.name.endsWith(".gz") ? 2 : 1)}" }
        ext.args   = "--MD -x map-hifi"
    }
    withName: 'SCAFFOLD_CURATION:BAM2COVERAGE_TRACKS' {
        ext.prefix = { "${bam.head().getBaseName(1)}" }
        ext.args   = ''                     // samtools sort
        ext.args2  = '-b -h -F 256'          // samtools view
        ext.args3  = '-bga -split'          // genomeCoverageBed
        //TODO use task2
        ext.args4  = { "-T \$PWD" } // sort
        ext.args5  = '--no-header --method average' // clodius aggregate
        publishDir = [
            path: { "$params.outdir/$stage.curate/higlass/$meta.assembly.build" },
            mode: params.publish_mode,
            pattern: "*.hitile"
        ]
    }
    withName: 'SCAFFOLD_CURATION:SEQTK_CUTN' {
        ext.prefix = { "${meta.assembly.build}" }
        ext.args   = "-n 1"
    }
    withName: 'SCAFFOLD_CURATION:CREATE_GAP_TRACKS' {
        ext.prefix = { "${meta.assembly.build}" }
        // ext.args   = { "" } // sort
        ext.args2  = '--no-header'                 // clodius aggregate
        publishDir = [
            path: { "$params.outdir/$stage.curate/higlass/$meta.assembly.build" },
            mode: params.publish_mode,
            pattern: "*.beddb"
        ]
    }
    withName: 'SCAFFOLD_CURATION:TIDK_SEARCH_BEDGRAPH' {
        ext.prefix = { "${meta.assembly.build}_telomer" }
        ext.args   = { "--window 10000 --extension bedgraph" } // tidk search
    }
    withName: 'SCAFFOLD_CURATION:TIDK_SEARCH_TSV' {
        ext.prefix = { "${meta.assembly.build}_telomer" }
        ext.args   = { "--window 10000 --extension tsv" } // tidk search
    }
    withName: 'SCAFFOLD_CURATION:CREATE_TELOMER_BIGWIG_TRACK' {
        ext.prefix = { "${meta.assembly.build}" }
        ext.args   = ''                  // sort
        ext.args2  = '--no-header'       // clodius aggregate bedgraph
        publishDir = [
            path: { "$params.outdir/$stage.curate/higlass/$meta.assembly.build" },
            mode: params.publish_mode,
            pattern: "*.bw"
        ]
    }
    withName: 'SCAFFOLD_CURATION:PRETEXT_TRACKS_INGESTION' {
        ext.prefix = { "${meta.assembly.build}" }
        publishDir = [
            path: { "$params.outdir/$stage.curate/pretext/$meta.assembly.build" },
            mode: params.publish_mode,
            pattern: "*_wTracks.pretext"
        ]
    }

    withName: 'EVALUATE_SCAFFOLDED_ASSEMBLY:MERQURYFK_MERQURYFK' {
        tag        = { meta.assembly.build }
        ext.prefix = { "${meta.assembly.build}_merquryfk" }
        publishDir = [
            path: { "$params.outdir/$stage.scaffold/merquryfk/$meta.assembly.build" },
            mode: params.publish_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }
    withName: 'EVALUATE_SCAFFOLDED_ASSEMBLY:MERQURY' {
        tag        = { meta.assembly.build }
        ext.prefix = { "${meta.assembly.build}_merqury" }
        publishDir = [
            path: { "$params.outdir/$stage.scaffold/merqury/$meta.assembly.build" },
            mode: params.publish_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }
    withName: 'EVALUATE_SCAFFOLDED_ASSEMBLY:BUSCO' {
        tag        = { "${meta.assembly.build}-${lineage}" }
        ext.prefix = { "${meta.assembly.build}-${lineage}" }
        ext.args   = '--tar'
        publishDir = [
            path: { "$params.outdir/$stage.scaffold/busco/$meta.assembly.build" },
            mode: params.publish_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }


    // Assembly report
    withName: 'TOL_SEARCH' {
        executor = 'local'
    }
    withName: 'REPORT_DTOL' {
        executor = 'local'
    }
    withName: 'REPORT_GENOMETRAITS' {
        executor = 'local'
    }
    withName: 'REPORT_SOFTWAREVERSIONS' {
        executor = 'local'
    }
    withName: 'ASSEMBLY_REPORT:QUARTO_NOTEBOOK' {
        publishDir = [
            path: { "$params.outdir/$stage.report" },
            mode: params.publish_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
            overwrite: true
        ]
    }
}
