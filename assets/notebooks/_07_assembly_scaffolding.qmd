::::: {.content-visible when-meta="scaffold"}

## Scaffolding

### Pairtools

```{python}
if scaffold and "pairtools" in multiqc.list_modules():
    display(multiqc.get_plot("pairtools", "Pairs by alignment status").show())
```

```{python}
if scaffold and "pairtools" in multiqc.list_modules():
    display(multiqc.get_plot("pairtools", "Fraction of read pairs by strand orientation").show())
```

```{python}
if scaffold and "pairtools" in multiqc.list_modules():
    display(multiqc.get_plot("pairtools", "Pre-filtered pairs as a function of genomic separation (in detail)").show())
```


#### Assembly k-mer completeness

```{python}
#| output: asis
if scaffold and glob.glob(f"{log_path}/*-scaffolded-*_merquryfk.completeness.stats"):
    print(
        pd.read_csv(
            glob.glob(f"{log_path}/*-scaffolded-*_merquryfk.completeness.stats")[0], sep="\t"
        ).to_markdown(index=False)
    )
else:
    print("Scaffolded Assembly Completeness not available")
```

##### Assembly quality value

```{python}
#| output: asis
if scaffold and glob.glob(f"{log_path}/*-scaffolded-*_merquryfk.qv"):
    print(
        pd.read_csv(
            glob.glob(f"{log_path}/*-scaffolded-*_merquryfk.qv")[0], sep="\t"
        ).to_markdown(index=False)
    )
else:
    print("Scaffolded Assembly Quality Score not available")
```

<details>
<summary>QV per scaffold</summary>

```{python}
#| output: asis
if scaffold:
    qvs = []
    for qv_file in glob.glob(f"{log_path}/*-scaffolded-*_merqury.*.qv"):
        if os.path.getsize(qv_file) > 0:
            qvs.append(
                pd.read_csv(
                    qv_file,
                    sep="\t",
                    header=None,
                    names=[
                        "Scaffold",
                        "No support k-mers",
                        "Total k-mers",
                        "QV",
                        "Error rate",
                    ],
                    dtype={
                        "Scaffold": str,
                        "No support k-mers": int,
                        "Total k-mers": int,
                        "QV": float,
                        "Error rate": float,
                    },
                    na_values=["", "inf"],
                )
            )
    if qvs:
        per_scaffold_qv_raw = pd.concat(qvs, ignore_index=True)
        print(per_scaffold_qv_raw.to_markdown(index=False))
    else:
        print("No per scaffold qv found")
```

</details>

##### Copy number spectra

:::: {.panel-tabset}

## MerquryFK

```{python}
# TODO Do we need for each fasta. This is combined fastas
if scaffold and glob.glob(f"{log_path}/*-scaffolded-*_merquryfk.spectra-cn.st.png"):
    display(Image(filename=glob.glob(f"{log_path}/*-scaffolded-*_merquryfk.spectra-cn.st.png")[0]))
else:
    print("Scaffolded Assembly MerquryFK copy spectra not available")
```

## Merqury

```{python}
if scaffold and glob.glob(f"{log_path}/*-scaffolded-*_merqury.spectra-cn.st.png"):
    display(Image(filename=glob.glob(f"{log_path}/*-scaffolded-*_merqury.spectra-cn.st.png")[0]))
else:
    print("Scaffolded Assembly Merqury copy spectra not available")
```

::::

##### Assembly spectra

:::: {.panel-tabset}

## MerquryFK

```{python}
# TODO account for multiple assemblers
if scaffold and glob.glob(f"{log_path}/*-scaffolded-*_merquryfk.spectra-asm.st.png"):
    display(Image(filename=glob.glob(f"{log_path}/*-scaffolded-*_merquryfk.spectra-asm.st.png")[0]))
else:
    print("Scaffold Assembly MerquryFK assembly spectra not available")
```

## Merqury

```{python}
if scaffold and glob.glob(f"{log_path}/*-scaffolded-*_merqury.spectra-asm.st.png"):
    display(Image(filename=glob.glob(f"{log_path}/*-scaffolded-*_merqury.spectra-asm.st.png")[0]))
else:
    print("Scaffolded Assembly Merqury assembly spectra not available")
```

::::

##### False duplications

```{python}
#| output: asis
if scaffold and glob.glob(f"{log_path}/*-scaffolded-*_merquryfk.false_duplications.tsv"):
    print(
        pd.read_csv(
            glob.glob(f"{log_path}/*-scaffolded-*_merquryfk.false_duplications.tsv")[0], sep="\t"
        ).to_markdown(index=False)
    )
else:
    print("Scaffold Assembly false duplications not available")
```

:::::
