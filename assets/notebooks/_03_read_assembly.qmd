::::: {.content-visible when-meta="assemble"}

## Assembly

```{python}
#| output: asis
if assemble and glob.glob(f"{log_path}/*-raw-*.assembly_summary"):
    displayGfastatsAssemblySummary(f"{log_path}/*-raw-*.assembly_summary")
```

```{python}
#| output: asis
if assemble and glob.glob(f"{log_path}/*-raw-*_merquryfk.completeness.stats"):
    displayAssemblyCompleteness(f"{log_path}/*-raw-*_merquryfk.completeness.stats")
```

```{python}
if assemble and "hifiasm" in multiqc.list_modules():
    display(multiqc.get_plot("hifiasm", "HiFiasm kmer graph").show())
```

##### Assembly quality value

```{python}
#| output: asis
if assemble and glob.glob(f"{log_path}/*-raw-*_merquryfk.qv"):
    print(
        pd.read_csv(
            glob.glob(f"{log_path}/*-raw-*_merquryfk.qv")[0], sep="\t"
        ).to_markdown(index=False)
    )
else:
    print("Raw assembly MerquryFK QV not available")
```

<details>
<summary>QV per scaffold</summary>

```{python}
#| output: asis
if assemble:
    qvs = []
    for qv_file in glob.glob(f"{log_path}/*-raw-*_merqury.*.qv"):
        if os.path.getsize(qv_file) > 0:
            qvs.append(
                pd.read_csv(
                    qv_file,
                    sep="\t",
                    header=None,
                    names=[
                        "Scaffold",
                        "No support k-mers",
                        "Total k-mers",
                        "QV",
                        "Error rate",
                    ],
                    dtype={
                        "Scaffold": str,
                        "No support k-mers": int,
                        "Total k-mers": int,
                        "QV": float,
                        "Error rate": float,
                    },
                    na_values=["", "inf"],
                )
            )
    if qvs:
        per_scaffold_qv_raw = pd.concat(qvs, ignore_index=True)
        print(per_scaffold_qv_raw.to_markdown(index=False))
    else:
        print("No per scaffold qv found")
```

</details>

##### Copy number spectra

:::: {.panel-tabset}

## MerquryFK

```{python}
# TODO account for multiple assemblers
# TODO: Add ln plot too see the relative contribution
if assemble and glob.glob(f"{log_path}/*-raw-*_merquryfk.*.spectra-cn.st.png"):
    display(Image(filename=glob.glob(f"{log_path}/*-raw-*_merquryfk.*.spectra-cn.st.png")[0]))
else:
    print("Raw Assembly MerquryFK copy number spectra not available")
```

## Merqury

```{python}
# TODO This path will be different depending on phased or not
if assemble and glob.glob(f"{log_path}/*-raw-*_merqury.*.spectra-cn.st.png"):
    display(Image(filename=glob.glob(f"{log_path}/*-raw-*_merqury.*.spectra-cn.st.png")[0]))
else:
    print("Raw Assembly Merqury copy number spectra not available")
```

::::

##### Assembly spectra

:::: {.panel-tabset}

## MerquryFK

```{python}
# TODO account for multiple assemblers
if assemble and glob.glob(f"{log_path}/*-raw-*_merquryfk.spectra-asm.st.png"):
    display(Image(filename=glob.glob(f"{log_path}/*-raw-*_merquryfk.spectra-asm.st.png")[0]))
else:
    print("Raw Assembly MerquryFK spectra not available")
```

## Merqury

```{python}
if assemble and glob.glob(f"{log_path}/*-raw-*_merqury.spectra-asm.st.png"):
    display(Image(filename=glob.glob(f"{log_path}/*-raw-*_merqury.spectra-asm.st.png")[0]))
else:
    print("Raw Merqury Assembly spectra not available")
```

::::

##### False duplications

```{python}
#| output: asis
if assemble and glob.glob(f"{log_path}/*-raw-*_merquryfk.false_duplications.tsv"):
    print(
        pd.read_csv(
            glob.glob(f"{log_path}/*-raw-*_merquryfk.false_duplications.tsv")[0], sep="\t"
        ).to_markdown(index=False)
    )
else:
    print("Merqury FK false duplications not available")
```

#### Assembly gene space completeness

```{python}
if assemble and "busco" in multiqc.list_modules():
    for lineage in multiqc.list_plots()["busco"]:
        display(multiqc.get_plot("busco", f"{lineage}").show())
```

### Other assemblies
TODO for each assembly output a stats section (expandable).

:::::
