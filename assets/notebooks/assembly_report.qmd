---
title: 'Earth Biogenome Project'
subtitle: 'NBIS Assembly Report'
date: today
toc: true
toc-location: left

engine: 'jupyter'

execute:
  echo: false
  warning: true

format:
  html:
    embed-resources: true
    theme:
      light: minty
      dark: darkly
---

## Introduction

This is an assembly report written by National Bioinformatics Infrastructure Sweden (NBIS) Earth Biogenome Project workflow.

The aim of this report is to guide you through the analysis, rather than
provide a summary of tool logs. If you have any additional
suggestions, please submit at feature request at [NBIS Earth Biogenome Project - Issues](https://github.com/NBISweden/Earth-Biogenome-Project-pilot/issues).

::: {.content-visible when-meta="debug"}

### Setup

This [Quarto notebook](https://quarto.org/) sets up certain parameters
at this point, and uses the MultiQC python package to find log
files of tools executed in the workflow.

```{python}
#| echo: false
#| tags: [parameters]

log_path = 'log_files'
inspect = True
preprocess = True
assemble = True
screen = True
purge = True
polish = True
scaffold = True
curate = True
alignRNA = False
debug = False
```

<details>
<summary>MultiQC Log parse</summary>

```{python}
#| output: true
#| echo: false

import multiqc
from pprint import pprint
multiqc.reset() # Important for Quarto preview
# Then load a custom config using
multiqc.load_config(f"{log_path}/multiqc_assembly_report_config.yml")
# The path appears to be relative to the current notebook location.
multiqc.parse_logs(log_path)
```

</details>

:::

## Species information

To begin our analysis, let’s explore the available species information. The following details are sourced from [Genomes on a Tree (GOAT)](https://goat.genomehubs.org/).

```{python}
#| echo: false
#| output: true

# TODO Print DTOL table
```

- ToLID:
- Species Name:
- Class:
- Order:

### Genome Traits

- Haploid Genome Size:
- Haploid Number:
- Ploidy:
- Sample Sex:

::: {.content-visible when-meta="inspect"}

## Data inspection

Let’s ensure the quality of our input data.

### Sequence data quantity

* Do we have enough total sequence data?
* Do we have enough long reads?

::: {.callout-note}
For long read data (PacBio, ONT) we expect to see 30x coverage per haplotype, for a good assembly.
:::

```{python}
# TODO data quantity table
```

### Genomic characteristics

We can glean a good amount of information about the sequenced species from the k-mer content of the data.

#### Ploidy
Does it show the correct ploidy?

::: {.callout-note}
A Kmer histogram counts the frequency of k-mers in the data. Some parts of the genome are unique, and
there are expected to be *coverage* times copies of these k-mers in the data. If the organism is diploid,
the regions unique to a haplotype should have *coverage* times copies of these k-mers, and regions shared
between both haplotypes should have *coverage* times two copies of these k-mers. This leads to formations
of peaks in the k-mer histogram. A haploid organism should have one peak, while a diploid should have two peaks.
:::

```{python}
#| output: asis
import glob
import os
from itertools import groupby

if inspect:
    images = [
        img
        for pattern in ["log_plot", "linear_plot"]
        for img in glob.glob(f"{log_path}/*_{pattern}.png")
    ]

    if len(images) == 0:
        raise ValueError("No files found")

    # Ensure we have multiples of 4 images
    if len(images) % 4 != 0:
        raise ValueError("There should be 4 images per GenomeScope2 process")

    # Function to sort filenames
    def sort_key(filename):
        filename = os.path.basename(filename)
        parts = filename.split("_")
        # Order: linear < log, non-transformed < transformed
        order = {"linear": 0, "log": 1}
        transformed = 1 if "transformed" in parts else 0
        return (" ".join(parts[:2]), transformed, order[parts[-2]])

    # Sort filenames first
    sorted_filenames = sorted(images, key=sort_key)

    # Group by sample
    grouped_filenames = {}
    for key, group in groupby(
        sorted_filenames, key=lambda x: " ".join(os.path.basename(x).split("_")[:2])
    ):
        grouped_filenames[key] = list(group)


    # Function to format filenames
    def format_filename(filename):
        # return os.path.basename(filename).replace(".png", "").replace("_", " ")
        return " ".join(os.path.basename(filename).split("_")[2:-1])

    # Print grouped and sorted filenames
    tabs = []  # tabbed panels
    for sample, files in grouped_filenames.items():
        # tabs.append(f"### {sample}")
        tabs.append("::: {.panel-tabset}")
        for image in files:
            formatted_filename = format_filename(image)
            tabs.append(f"## {formatted_filename}")
            tabs.append(f"![{formatted_filename}]({image})")
        tabs.append(":::")

    markdown = "\n\n".join(tabs)
    print(markdown)
```

#### SmudgePlot

Does the smudgeplot indicate the expected ploidy?

#### GC content

KAT GC

:::{.callout-note}
* Unexpected GC content value can indicate contamination.
* Unexpected blobs(?) in the plot can indicate contamination.
:::

### Synthetic sequence content

Do we see indications of synthetic sequences such as adaptors?

```{python}
# TODO FastQC, FCS-Adaptor
```

:::

::: {.content-visible when-meta="preprocess"}

## Data processing

:::

::: {.content-visible when-meta="assemble"}

## Assembly

### General comparison

TODO Insert Quast output.

### Best ranked assembly

#### Assembly statistics

#### Assembly k-mer completeness

#### Assembly gene space completeness

### Other assemblies
TODO for each assembly output a stats section (expandable).

## Organelle detection

:::

::: {.content-visible when-meta="screen"}

## Contamination Screen

:::

::: {.content-visible when-meta="purge"}

## Duplication purging

:::

::: {.content-visible when-meta="polish"}

## Polishing

:::

::: {.content-visible when-meta="scaffold"}

## Scaffolding

:::

::: {.content-visible when-meta="curate"}

## Curation

:::

## Summary

### EBP Metrics and curation notes

- Table of Assembly standards
    - Metrics flagged as red ( below EBP standards )
- Curator notes
- Contaminants detected
- Other observations

### Assembly pipeline

- Tool version table ( Hifiasm, purge_dups, bionano, YaHS )

## Curation pipeline

- Tool version table ( GRIT_rapid, HiGlass )
