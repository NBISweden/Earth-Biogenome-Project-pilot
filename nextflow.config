manifest {
    name = 'Earth Biogenome Project Assembly and Annotation workflow'
    author = 'Mahesh Binzer-Panchal'
    homePage = 'https://github.com/NBISweden/Earth-Biogenome-Project-pilot'
    description = 'A pilot workflow for performing de novo genome assembly and annotation for the Earth Biogenome Project.'
    mainScript = 'main.nf'
    //  '!>=21.04.0' : Run with version 21.04.0 or higher, otherwise exit.
    nextflowVersion = '!>=21.04.0'
    version = '0.1'
}

// Default Workflow parameters
// Override by supplying a params.yml file to the -params-file option in Nextflow.
params {

    // Workflow inputs
    input              = null
    reference          = null

    steps              = 'inspect,preprocess,assemble,purge,polish,screen,scaffold,curate'
    organelle_assembly_mode = 'contigs'

    // Workflow outputs
    outdir             = 'results'
    // Mode of copying results from the work directory
    // 'symlink' : Use for test data.
    // 'copy'    : Use for full analysis data.
    publish_mode       = 'copy' // values: 'symlink', 'copy'
    use_phased         = false
    // Cache folder to store database outputs
    cache              = 'database_cache'

    // Tool specific
    // FASTK
    fastk.kmer_size        = 31
    // MERYL
    meryl.kmer_size        = 31
    // GENESCOPEFK
    genescopefk.kmer_size  = 31
    // HIFIASM
    hifiasm                = null // Expects a Map of options [ opts01: "--opt1 --opt2 val", opts02: "--opt2 val --opt3" ]
    // BUSCO
    busco.lineages         = null // A comma separated set of lineages or 'auto' (default: Retrieve from GOAT.)
    busco.lineages_db_path = null
    // DIAMOND
    diamond.db             = null
    // BLAST
    blast.db               = null
    // NCBI
    // ncbi.taxdb             = 'ftp://ftp.ncbi.nih.gov/pub/taxonomy/taxdump.tar.gz'
    // MASH
    mash.screen_db         = 'https://gembox.cbcb.umd.edu/mash/refseq.genomes%2Bplasmid.k21s1000.msh'
    // MITOHIFI
    // mitohifi.code          = 1 // Standard genetic code
    // FCS
    fcs.database           = null
    fcs.manifest           = "https://ftp.ncbi.nlm.nih.gov/genomes/TOOLS/FCS/database/latest/all.manifest"
    fcs.ramdisk_path       = '/dev/shm/gxdb'
    // QUARTO
    quarto_assembly_report = "$projectDir/assets/notebooks/assembly_report.qmd"

    // General module configuration
    multiqc.config         = "$projectDir/configs/multiqc_conf.yaml"
    multiqc_assembly_report_config = "$projectDir/configs/multiqc_assembly_report_config.yml"

    // define HiC mapping pipeline [ "bwa", "bwa-mem2", "minimap2", "strobealign", "" ]
    hic_aligner             = 'bwa-mem2' 
    // define HiC workflow strategy [ "arima", "omni-c", "sanger" ]
    hic_alignment_protocol           = 'arima'

    // define HiC sequencing type [ "arima_v2", "arima_v1", "omni-c", "" ]
    hic_type               = 'arima_v2'
    // define how to sort the final HiC bam file: [ by_coordinate, by_name ]
    hic_bam_sorting        = 'by_name'
    // define 1000bp bin size for cooler cload intervals
    cooler_bin_size        = 1000
    // define how to sort the HiC-maps: [ length, name, nosort ]
    hic_map_sort_by        = 'length'
    // define minimum map quality for HiC alignments
    hic_map_qv             = 0
    // pacbio hifi coverage cap for pretext and higlass coverage track, e.g. cap repeats at <hifi_coverage_cap>
    hifi_coverage_cap      = 100
    // telomer motif
    telomer_motif          = "TTAGGG"
}

// Set container registry information
apptainer.registry   = 'quay.io'
docker.registry      = 'quay.io'
podman.registry      = 'quay.io'
singularity.registry = 'quay.io'

includeConfig 'configs/nf-core-defaults.config'

// Set bash options
process.shell = """\
bash

set -e # Exit if a tool returns a non-zero status/exit code
set -u # Treat unset variables and parameters as an error
set -o pipefail # Returns the status of the last command to exit with a non-zero status or zero if all successfully execute
set -C # No clobber - prevent output redirection from overwriting files.
"""

profiles {

    debug {
        process.beforeScript = 'env'
    }

    conda {
        conda.enabled        = true
    }

    mamba {
        conda.enabled        = true
        conda.useMamba       = true
    }

    micromamba {
        conda.enabled        = true
        conda.useMicromamba  = true
    }

    docker {
        docker.enabled       = true
        docker.runOptions    = '-u $(id -u):$(id -g)'
    }

    arm {
        docker.runOptions    = '-u $(id -u):$(id -g) --platform=linux/amd64'
    }

    singularity {
        singularity.enabled  = true
    }

    gitpod {
        executor {
            name             = 'local'
            cpus             = 8
            memory           = 30.GB
        }
        process {
            resourceLimits   = [
                cpus: 8,
                memory: 30.GB,
                time: 1.d
            ]
        }
    }

    // Test profiles
    test {
        includeConfig 'configs/test.config'
    }

    // Profiles for the Uppmax clusters
    uppmax {
        includeConfig 'configs/uppmax.config'
    }

    // A profile for running locally with Singularity
    // (e.g., using an interactive Uppmax session)
    uppmax_local {
        process {
            executor       = 'local'
            scratch        = '$SNIC_TMP'
        }
        singularity {
            enabled        = true
            envWhitelist   = 'SNIC_TMP'
        }
    }

    uppmax_databases {
        params {
            busco_lineage_path = '/sw/bioinfo/BUSCO/v5_lineage_sets'
            diamond_db         = '/proj/snic2021-5-291/nobackup/databases/diamond_uniprot'
            blast_db           = [
                '/proj/snic2021-5-291/nobackup/databases/blast_refseq_euk',
                '/proj/snic2021-5-291/nobackup/databases/blast_refseq_prok',
                '/proj/snic2021-5-291/nobackup/databases/blast_refseq_virus',
            ]
            ncbi_taxonomy      = '/sw/data/ncbi_taxonomy/latest/'
        }
    }

    dardel {
        includeConfig 'configs/dardel.config'
    }

    nac {
        includeConfig 'configs/nac.config'
    }
}

includeConfig 'configs/modules.config'

// Enable tracing by default
// Add time stamp following nf-core: https://github.com/nf-core/tools/blob/master/nf_core/pipeline-template/nextflow.config
def trace_timestamp = new java.util.Date().format('yyyy-MM-dd_HH-mm-ss')
timeline {
    enabled = true
    file    = "${params.outdir}/pipeline_info/execution_timeline_${trace_timestamp}.html"
}
report {
    enabled = true
    file    = "${params.outdir}/pipeline_info/execution_report_${trace_timestamp}.html"
}
trace {
    enabled = true
    file    = "${params.outdir}/pipeline_info/execution_trace_${trace_timestamp}.txt"
}
dag {
    enabled = true
    file    = "${params.outdir}/pipeline_info/pipeline_dag_${trace_timestamp}.mmd"
}
