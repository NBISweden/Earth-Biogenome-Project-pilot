manifest {
    name = 'Earth Biogenome Project Assembly and Annotation workflow'
    author = 'Mahesh Binzer-Panchal'
    homePage = 'https://github.com/NBISweden/Earth-Biogenome-Project-pilot'
    description = 'A pilot workflow for performing de novo genome assembly and annotation for the Earth Biogenome Project.'
    mainScript = 'main.nf'
    //  '!>=21.04.0' : Run with version 21.04.0 or higher, otherwise exit.
    nextflowVersion = '!>=21.04.0'
    version = '0.1'
}

// Default Workflow parameters
// Override by supplying a params.yml file to the -params-file option in Nextflow.
params {

    // Workflow inputs
    input              = null
    reference          = null
    // kmer_size          = 31
    // ploidy             = 2

    steps              = 'inspect,preprocess,assemble,purge,polish,screen,scaffold,curate'

    // Workflow outputs
    outdir             = 'results'
    // Mode of copying results from the work directory
    // 'symlink' : Use for test data.
    // 'copy'    : Use for full analysis data.
    publish_mode       = 'copy' // values: 'symlink', 'copy'

    // Tool specific
    // BUSCO
    busco_lineages     = 'auto'
    busco_lineage_path = null
    // DIAMOND
    diamond_db         = null
    // BLAST
    blast_db           = null
    // BLOBTOOLS
    ncbi_taxonomy      = null
    // MASH
    mash_screen_db     = 'https://gembox.cbcb.umd.edu/mash/refseq.genomes%2Bplasmid.k21s1000.msh'

    // General module configuration
    multiqc_config = "$baseDir/configs/multiqc_conf.yaml"

}

// Set container registry information
apptainer.registry   = 'quay.io'
docker.registry      = 'quay.io'
podman.registry      = 'quay.io'
singularity.registry = 'quay.io'

includeConfig 'configs/nf-core-defaults.config'

profiles {

    conda {
        conda.enabled        = true
    }

    mamba {
        conda.enabled        = true
        conda.useMamba       = true
    }

    micromamba {
        conda.enabled        = true
        conda.useMicromamba  = true
    }

    docker {
        docker.enabled       = true
        docker.userEmulation = true
    }

    arm {
        docker.runOptions = '-u $(id -u):$(id -g) --platform=linux/amd64'
    }

    singularity {
        singularity.enabled  = true
    }

    gitpod {
        executor {
            name             = 'local'
            cpus             = 8
            memory           = 30.GB
        }
    }

    execution_report {
        timeline {
            enabled = true
            file    = "${params.outdir}/pipeline_info/execution_timeline.html"
        }
        report {
            enabled = true
            file    = "${params.outdir}/pipeline_info/execution_report.html"
        }
        trace {
            enabled = true
            file    = "${params.outdir}/pipeline_info/execution_trace.txt"
        }
        dag {
            enabled = true
            file    = "${params.outdir}/pipeline_info/pipeline_dag.mmd"
        }
    }

    // Test profiles
    test {
        params {
            input          = "$projectDir/assets/test_hsapiens.yml"
            busco_lineages = 'eukaryota'
        }
    }

    testdata_full {
        params {
            input          = "$projectDir/assets/test_dataset_full.yml"
            busco_lineages = 'eukaryota'
        }
    }

    // Profiles for the Uppmax clusters
    uppmax {
        params {
            // SNIC compute allocation id
            project = ''
        }
        process {
            executor       = 'slurm'
            clusterOptions = { "-A $params.project" }
            // Use node local storage for execution.
            scratch        = '$SNIC_TMP'
        }
        singularity {
            enabled        = true
            envWhitelist   = 'SNIC_TMP'
        }
    }

    // A profile for running locally with Singularity
    // (e.g., using an interactive Uppmax session)
    uppmax_local {
        process {
            executor       = 'local'
            scratch        = '$SNIC_TMP'
        }
        singularity {
            enabled        = true
            envWhitelist   = 'SNIC_TMP'
        }
    }

    uppmax_databases {
        params {
            busco_lineage_path = '/sw/bioinfo/BUSCO/v5_lineage_sets'
            diamond_db         = '/proj/snic2021-5-291/nobackup/databases/diamond_uniprot'
            blast_db           = [ 
                '/proj/snic2021-5-291/nobackup/databases/blast_refseq_euk',
                '/proj/snic2021-5-291/nobackup/databases/blast_refseq_prok',
                '/proj/snic2021-5-291/nobackup/databases/blast_refseq_virus',
            ]
            ncbi_taxonomy      = '/sw/data/ncbi_taxonomy/latest/'
        }
    }
}

includeConfig 'configs/modules.config'
